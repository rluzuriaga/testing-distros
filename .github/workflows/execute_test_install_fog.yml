name: Execute - Test Install FOG

on:
  workflow_dispatch:
  repository_dispatch:
    types: [fog-install-test]

defaults:
  run:
    shell: bash

permissions: 
  actions: write
  contents: write

jobs:
  get-all-distros-matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # - name: Install jq
      #   run: sudo apt-get install jq -y
      
      - name: Set matrix of distros
        id: set-matrix
        run: |
          cd .github/workflows/
          json_array=$(jq -n '[]')

          for distro_file in $(ls distro_*); do
            json_array=$(echo "$json_array" | jq --arg distro "$distro_file" '. + [$distro]')
          done
          
          matrix=$(echo "{\"distros\": $json_array}" | jq -c .)

          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  run-distro-workflow:
    needs: get-all-distros-matrix
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        ${{fromJson(needs.get-all-distros-matrix.outputs.matrix)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run all distros
        run: gh workflow run ${{ matrix.distros }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  check-all-distros-ran-successfully:
    needs: [get-all-distros-matrix, run-distro-workflow]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        ${{fromJson(needs.get-all-distros-matrix.outputs.matrix)}}
    
    steps:
      - name: Wait a bit for the runs to start
        run: sleep 15

      - name: Get run IDs
        run: |
          run_id=$(gh run list --repo ${{ github.repository }} --workflow ${{ matrix.distros }} --json databaseId --limit 1 | jq -r '.[0].databaseId')
          run_status=""
          while [[ $run_status != "success" && $run_status != "failure" ]]; do
            sleep 30
            run_status=$(gh run view --repo ${{ github.repository }} $run_id --exit-status --json conclusion | jq -r '.conclusion')
          done
          
          if [[ $run_status == "failure" ]]; then
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

      # - name: Run all distros
      #   run: |
      #     for fn in $(cd ./.github/workflows && ls distro_*); do
      #       echo "$fn"

      #       curl -L \
      #       -X POST \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #       -H "X-GitHub-Api-Version: 2022-11-28" \
      #       "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$fn/dispatches" \
      #       -d '{"ref":"main"}'
      #     done

      # - name: Check if all distros ran
      #   run: |
      #     sleep 30
      #     run_status="in_progress"
          
      #     for fn in $(cd ./.github/workflows && ls distro_*); do

      #       while [ "$run_status" == "in_progress" ] || [ "$run_status" == "queued" ]; do
      #         echo "here"
      #         run_status=$(curl -s \
      #                       -H "Accept: application/vnd.github+json" \
      #                       -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #                       -H "X-GitHub-Api-Version: 2022-11-28" \
      #                       https://api.github.com/repos/${{ github.repository }}/actions/workflows/$fn/runs \
      #                       | jq -r '.workflow_runs[0].status')
      #         sleep 10
      #       done
          
      #     done

      #       conclusion=$(curl -s \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer $GITHUB_TOKEN" \
      #         -H "X-GitHub-Api-Version: 2022-11-28" \
      #         https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow_file/runs?branch=main&status=all \
      #         | jq -r '.workflow_runs[0].conclusion')

      #       if [ "$conclusion" != "success" ]; then
      #         echo "Workflow $workflow_file did not complete successfully."
      #         exit 1
      #       else
      #         echo "Workflow $workflow_file completed successfully."
      #       fi
      #     }

      #     while IFS= read -r workflow; do
      #       echo "Checking status of $workflow"
      #       check_workflow_status "$workflow"
      #     done < workflow_list.txt
